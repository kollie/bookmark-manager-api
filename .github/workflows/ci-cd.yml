name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///:memory:'
  SECRET_KEY: 'test-secret-key'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [${{ env.PYTHON_VERSION }}]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        SECRET_KEY: ${{ env.SECRET_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bookmark-manager-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: bookmark-manager-api
        region: us-central1
        image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bookmark-manager-api:latest
        flags: |
          --set-env-vars=SECRET_KEY=${{ secrets.SECRET_KEY }}
          --set-env-vars=DATABASE_URL=${{ secrets.DATABASE_URL }}
          --set-env-vars=ALGORITHM=HS256
          --set-env-vars=ACCESS_TOKEN_EXPIRE_MINUTES=30
